"" this documment is my report for my time interning at Siemens. updated weekly ""

During the first week that I worked for Siemens mobility AG, I participated in an orientation called "onboarding." During this period, I became familiar with the business grounds, the rules of the firm, my coworkers, and my work station. I was informed, for the most part, as to where I should go for certain questions and who I should speak with regarding certain questions and where I should go for certain questions. In addition to this, I was provided with a work computer on which I was tasked with setting up both my credentials to obtain Local Admin Rights and a developer environment for the IXL project. I was also given the responsibility of setting up the machine myself. Because there were complications with the onboarding procedure that caused the entire process to be drawn out longer than expected, it took a week to complete the formalities that were indicated above, including setting up my work station. In spite of this, at the end of the first week, it was a success in the sense that I was finally able to access the fundamental software required for day-to-day activities such as email, the company portal, and the Siemens code repository. This was a sign that it had been partially successful.


I was given my first assignment not long after the beginning of the second week. This task required me to become familiar with the theory that governs the framework for building up the baseline measurement techniques. This theory encompasses a number of RFC entries (request for comment) that have been published by the IEFT community. RFC 791 (IP SPECIFICATION), RFC 4656 (ONE WAY ACTIVE MEASUREMENT PROTOCOL), RFC 2679 (ONE WAY PACKET DELAY), RFC 2680 (ONE WAY PACKET LOSS), RFC 5136 (IP NETWORK CAPACITY), and RFC 2698 (TWO RATE THREE COLOR MARKER) are a few of the entries that deserve special mention for their significance. A number of these entries provide several techniques of actively measuring and monitoring network traffic; nevertheless, there are caveats that one must take into account because there are a variety of constraints that arise at the various network layers. When putting these approaches, which are described in the RFCs, into practice, one needs to take into account the limitations that are present at that layer as well as the heuristics that applied to circumvent these obstacles.


In a manner analogous to that of the TWAMP (TWO WAY ACTIVE MEASUREMENT PROTOCOL), the OWAMP calls for the utilization of a control algorithm. This algorithm is responsible for the initiation of the transmission of packets between hosts, which clarifies the precise timing of the measurement. There are a few key areas in which our project, which we refer to as ONE WAY PASSIVE MEASUREMENT PROTOCOL (OWPMP), diverges from OWAMP. The absence of a control algorithm that triggers the transfer of data between the source host and the destination host is the aspect that stands out as being the most significant change. This also contibutes to a wehole host of issues that initially were accounted for, and to combat such issues, timestamps for Reception and Transmission have been introduced to the IP MO (measurremnt option) as well as a packet identifier in the form of a 16 bit UID counter.
Needless to say, some of the more prominent issues will persist, and have been accoutned for in our analysis which will be covered in later sections of this report.














WEEK 06
---------
After modifiying the Core data structure to utiise the Python 3 dataclass libraray, the first step i took to test and implement these changes was with the IP packet loss module. 






Structure to follow (delete on completion)
- intro to onboarding cycle(s)
- RFC standard entries of note
- intro to IP Packet measurement methodologies (OWAMP/TWAMP)
- brief over view of OWPMP and how it differs to OWAMP
- week by week progress on what i implemented
- state hurdles encountered during imlplementation 
-- week 02 : implemented unitt test for measurement, measurement interface, config_color_markera nd two-rate-three color marker modules
            made corrections to color rate marker module (yellow bucket was getting filled with wrong packets due to incorrect logic) and data rate calculator 
-- week 03 : finished implementing unittest for the modules mentuioned above and the data rate module,
            moved the unittests to a seperate module out side thier parent class modules.
-- week 04 : started implementatio of ip packet loss detection module, completed first draft implementation
            implemented unittest for the loss conditions.
-- week 05 : started implementing packet delay module, partially completed first draft implementation. 
            implemented uittest for the delay calculation.
            - the difficulty in working wiht dictionaries when running such calculations became more pronounced.
-- week 06 : hit a wall with the calculation for delay, inflection point occured. We decided to convert our data structure containing the relevant packet information
            from a dictionary to a dataclass.
            - The need for tracking "potentially missing packets" during loss calculation was realised.
            - Two potential solutions presented itself 1.) using an obsever pattern 2.) using list comprehension.
            - implementation of data class for ip packets started.
            - implementation for observer pattern started.
            - float point issues arrising due precision requirements. Fix realised was using the Decimal module to maintain precision.
            - debate on wether to pass the decimal part reported in nano seconds as a string or divide by 1 billion. [the latter was decided on simply out of prefrence] 
            - suspended delay module.
-- week 07 : completed dataclass implementation.
            implemented unittest for dataclass module.
            - observer pattern turned out to be unecessaryliy complex fo the task at hand (logging skipped packets via UID check)
            - switched to list comprehension to solve the problem. it worked! and was monumentally easier.
            - started conversion of exiting modules, first with packet loss, to utilise the dataclass means, resulting in an almost total redesing but not quite.
            - started Documentation for the methodology in corresponding RFC drafts. Loss measurement first
-- week 08 : completed conversion of Loss measurement class to utilise the new dataclass standard.
            - included the distinction from loss due to delay, total loss and packet reordering, in the results list.
            - switched from using receive times to determine loss, to using transmit times.
            - implemnted a record list of skipped packets (UID) to allow tracking of delay-loss for skipped packets should said packets be out of order.
            - if a packet goes into said list of 'skipped packets' then their re-order flag is automatically set to 1 [TRUE].
            - made changes to RFC docs on loss algorithim.
            - 
-- week 09 : Started setting up the network simulator on air gapped machine running Debian.
            - intital steps involved updating the system and sys level dependencies from 11 bullseye to 12 bookworm [12.2.0]
            - major limitation due to having zero network access on the Debian Machine. Everything had to be transfered via flash from my main computewre with network access.
            - set up a WSL [Debian 12] on my networked computer to allow downloading adn configuring required .deb packages, before transfering to the AG(air-gapped) machine. (consider a process description)
            - selected Core [COMMON OPEN REASERCH NETWORK EMULATOR] as the preferred emulation software to use.
            - {Debian GUI crashed allong the way. FUll reinstall was required}
            - Ran into post intallation issues of whixh the most prominent was trying to update the sys packages using debians package manager APT/APT-GET. The issue stemmed from post installation process listing 'CDROM: [Debian 12...] bookworm stable main' in apt's sources.list as the go to location for updating the package list.
            - CD's werernt actually used in DEB-12 installation, more so a flashdrive burned with but fix reuired a bit of a maneuver 



















